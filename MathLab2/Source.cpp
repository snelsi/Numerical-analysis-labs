/**********************************************************************************************************/
/*** 									  Лабороторна робота №2 										***/
/*** 										   Варiант №5		 										***/
/*** 											З курсу		 											***/
/*** 										Чисельнi методи 											***/
/*** 								ПРЯМІ МЕТОДИ РОЗВ'ЯЗУВАННЯ СИСТЕМИ									***/
/***									ЛІНІЙНИХ АЛГЕБРАЇЧНИХ РІВНЯНЬ									***/
/*** 											Завдання: 												***/
/***	Записати систему рiвнянь у матричнiй формi i скласти програму її розв'язування методом			***/
/***	Жордана-Гаусса з вибором головного елемента, порiвняти результати з звичайним методом Жордана.	***/
/***								Вивести вектор розв'язку та нев'язки.								***/
/***																Виконав:	Журавльов Роман ТР-71	***/
/**********************************************************************************************************/

#include <iostream>
#include <iomanip>
#include <conio.h>
#include <math.h>

using namespace std;

const int n = 4;
float a[n][n];
float b[n];
float x[n];					// Ключи Матрицы


void init();				// Инициализация начальной матрицы
void print();				// Вывод матрицы
void JordanLead();			// Решение слу методом Жордана с выбором главного элемента
void Jordan();				// Решение слу методом Жордана
void miss();				// Погрешность


int main() {
	system("chcp 1251 & cls");

	init();				// Инициализация матрицы
	print();			// Вывод условия

	cout << "Решение по методу Жордана с выбором вглавного элемента:\n";

	JordanLead();		// Решение слу
	print();			// Вывод решения
	miss();				// Вывод погрешности

	cout << "\nРешение по методу Жордана:\n";

	Jordan();
	print();
	miss();
	getchar();
}


// Инициализация матрицы
void init() {
	a[0][0] = 3;	a[0][1] = 0;	a[0][2] = 67;    a[0][3] = 7;		b[0] = 6;
	a[1][0] = 10;   a[1][1] = 1;    a[1][2] = 12;    a[1][3] = 3;		b[1] = 3;
	a[2][0] = 8;	a[2][1] = n;	a[2][2] = 5;	 a[2][3] = 1;		b[2] = 3;
	a[3][0] = 5;	a[3][1] = 2;    a[3][2] = 98;    a[3][3] = 80;		b[3] = 9;
}


// Вывод матрицы
void print() {
	cout << "\n";
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << fixed << setprecision(1) << setw(5) << a[i][j] << "  ";
		}
		cout << "=  " << b[i] << endl;
	}
	cout << endl;
}

// Метод Жордана
void Jordan() {
	float R;
	for (int k = 0; k < n; k++)
	{
		for (int i = 0; i < n; i++)
		{
			if (i != k)
			{
				R = a[i][k] / a[k][k];
				for (int j = k; j < n; j++)
				{
					a[i][j] -= a[k][j] * R;
				}
				b[i] -= b[k] * R;
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		x[i] = b[i] / a[i][i];
	}
}

// Метод Жордана с выбором главного элемента
void JordanLead() {
	float lead, R;
	for (int k = 0; k < n; k++)
	{
		lead = a[k][k];

		// Деление рядов на главный элемент
		for (int j = k; j < n; j++)
		{
			a[k][j] /= lead;
		}
		b[k] /= lead;


		for (int i = 0; i < n; i++)
		{
			if (i != k)
			{
				R = a[i][k] / a[k][k];
				for (int j = k; j < n; j++)
				{
					a[i][j] -= a[k][j] * R;
				}
				b[i] -= b[k] * R;
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		x[i] = b[i] / a[i][i];
	}
}


//  Вычисление погрешности
void miss()
{
	init();
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << "x[" << i + 1 << "] = " << x[i] << endl;
	}
	cout << endl;

	for (int i = 0; i < n; i++) {
		double s = 0;								// Сума ряда
		for (int j = 0; j < n; j++) {
			s += a[i][j] * x[j];
		}
		printf("a[%d] = %lf\n", i + 1, s - b[i]);	// Вывод каждой погрешности
	}
}
